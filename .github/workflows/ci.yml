name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
        os: [ubuntu-latest, ubuntu-20.04]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libc6-dev \
          build-essential \
          pkg-config

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run tests
      run: cargo test --verbose --all-features

    - name: Build release
      run: cargo build --release --verbose

    - name: Test CLI functionality
      run: |
        ./target/release/linux-distro-agent --version
        ./target/release/linux-distro-agent detect
        ./target/release/linux-distro-agent list-supported
        ./target/release/linux-distro-agent generate-config

  test-distros:
    name: Test on Different Distributions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        distro:
          - ubuntu:22.04
          - ubuntu:20.04
          - debian:bullseye
          - fedora:38
          - archlinux:latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Test on ${{ matrix.distro }}
      run: |
        docker run --rm -v $PWD:/workspace -w /workspace ${{ matrix.distro }} bash -c "
          # Install dependencies based on distro
          if command -v apt-get >/dev/null 2>&1; then
            apt-get update && apt-get install -y curl build-essential pkg-config
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source ~/.cargo/env
          elif command -v dnf >/dev/null 2>&1; then
            dnf install -y curl gcc pkg-config
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source ~/.cargo/env
          elif command -v pacman >/dev/null 2>&1; then
            pacman -Sy --noconfirm curl base-devel
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source ~/.cargo/env
          fi
          
          # Build and test
          cargo build --release
          ./target/release/linux-distro-agent detect
          ./target/release/linux-distro-agent list-supported
        "

  build-artifacts:
    name: Build Release Artifacts  
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'release'
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross
      run: cargo install cross

    - name: Build release binary
      run: cross build --release --target ${{ matrix.target }}

    - name: Package binary
      run: |
        mkdir -p dist
        cp target/${{ matrix.target }}/release/linux-distro-agent dist/
        tar -czf linux-distro-agent-${{ matrix.target }}.tar.gz -C dist linux-distro-agent

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./linux-distro-agent-${{ matrix.target }}.tar.gz
        asset_name: linux-distro-agent-${{ matrix.target }}.tar.gz
        asset_content_type: application/gzip

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Build documentation
      run: cargo doc --no-deps --all-features

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./target/doc
        destination_dir: docs
